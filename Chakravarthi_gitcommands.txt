INSTALLATION & GUI :

There are several platforms where pepole work and Github provides ease of staying upto date with latest release of command line tool while providing

graphical user interface for day-day review,interaction & repository synchronization.The link for different platforms are


1-GitHub for Windows

htps://windows.github.com

2-GitHub for MAC

htps://mac.github.com

3-GitHub for all platforms

htp://git-scm.com

For Linux and Solaris platforms,the latest release is available on the official Git website.

------------------------------------------------------------------------------------------------------------------------------------------------------

SETUP:

Configuring user information used across all local repositories 

1-To set a name  that is indentifiable for credit when review version history

Syntax----> git config --global user.name "USER NAME"


2-To set an email  address that will be associated with each history marker

Syntax----> git config --global user.email "USER MAIL ID"

3-To set automatic command line coloring for Git easy reviewing

Syntax---->git config --global color.ui auto

---------------------------------------------------------------------------------------------------------------------------------------------------------

SETUP & INIT :

For configuring user information,initialising and cloning repositires we use the following commands

1-To initialise an existing directory as Git repository 

Syntax----> git init

2-To retrieve an entire repository from a hosted location via URL

Syntax----> git clone <URL>

---------------------------------------------------------------------------------------------------------------------------------------------------------

STAGE & SNAPSHOT :

For working with snapshots & and the Git Staging area we use the following commands

1-To show modified files in working directory,staged for your next commit 

Syntax----> git status

2-To add a file as it looks now to your next commit (stage)

Synatx----> git add <FILE>

3-To unstage a file while retaining the changes in working directory

Syntax----> git reset <FILE>

4-To diff of what is changed but not staged

Syntax----> git diff

5-To diff of what is staged but not yet committed 

Syntax----> git diff --staged 

6-To commit your staged content as a new commit snapshot

Syntax----> git commit -m "COMMENTS"

---------------------------------------------------------------------------------------------------------------------------------------------------------

BRANCH & MERGE :

For isolating work in branches,changing context,and integrating changes we use following commands

1-To list your branches a "*" will appear next to the currently active branch 

Syntax----> git branch

2-To create a new branch at current commit 

Syntax----> git branch <BRANCH NAME>

3-For switching to another branch and check it out into your working directory 

Syntax----> git checkout 

4-For merging the specified branche's history into the current one

Syntax----> git merge <BRANCH>

5-To show all commits in the current branche's history

Syntax----> git log

---------------------------------------------------------------------------------------------------------------------------------------------------------

INSPECT & COMPARE :

For examing logs,diffs and object information we use the following commands

1-To show the commit history for the currently active branch

Syntax----> git log

2-To show the commits on branch A that are not on branch B

Syntax----> git log branch B.....branch A

3-To show the commits that changed file,even across renames

Syntax----> git log --follow <FILE>

4-To show the diff of what is in branch A that is not in branch B

Syntax----> git diff branchB....branchA

5-To show any object in Git in human-readable format

Syntax----> git show <SHA>

---------------------------------------------------------------------------------------------------------------------------------------------------------

TRACKING PATH CHANGES :

To Versioning file removes  and path changes we use the following commands

1-To delete the file from project and stage the removal for commit 

Syntax----> git rm <FILE>

2-To change an existing file path and stage the move

Syntax----> git mv <EXISTING PATH> <NEW PATH>

3-To show all commit logs with indication of any paths that moved

Syntax----> git log --stat -M

---------------------------------------------------------------------------------------------------------------------------------------------------------

IGNORING PATTERNS:

For preventing unintenional stagging or commiting of files we use the following commands 

1-To save a file with desired pattern as .gitignore with either direct string matches or wildcard globs

Syntax----> logs/
	    * .notes
	    pattern*/

2-To system wide ignore pattern for all local repositories

Syntax----> git config --global core.excludesfile <FILE>

---------------------------------------------------------------------------------------------------------------------------------------------------------

SHARE & UPDATE :

For retrieving updates from another repository and updating local repos we use following commands 

1-To add a git URL as an alias

Syntax----> git remote add <ALIAS> <URL>

2-To fetch down all the branches from that Git remote

Syntax----> git fetcgh <ALIAS>

3-To merge a remote branch into your current branch to bring it up to date 

Syntax----> git merge <ALIAS>/<BRANCH>

4-TO transmit local branch commits to the remote repository branch

Syntax----> git push <ALIAS> <BRANCH>

5-To fetch and merge any commits from the tracking remote branch 

Syntax----> git pull

---------------------------------------------------------------------------------------------------------------------------------------------------------

REWRITE HISTORY :

For rewriting branches,updating commits and clearing history we use the following commands

1-To apply any commits of current branch ahead of specified one 

Syntax----> git rebase <BRANCH>

2-To clear stagging area,rewrite working tree from specified commit

Syntax----> git reset --hard <COMMIT>

---------------------------------------------------------------------------------------------------------------------------------------------------------

TEMPORARY COMMITS :

Temporarily store modified,tracked files in order to change branches we use the following commands

1-To save modified and staged changes

Syntax----> git stash

2-To list stack-order of stashed file changes

Syntax----> git stags list

3-To write working from top of stash stack

Synatx----> git stash pop

4-To discard the changes from top of stash stack

Syntax----> git stash drop
---------------------------------------------------------------------------------------------------------------------------------------------------------



